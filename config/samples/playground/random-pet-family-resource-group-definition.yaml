apiVersion: klaudete.nubank.com.br/v1alpha1
kind: ResourceGroupDefinition
metadata:
  name: random-pet-family
  namespace: playground
spec:
  generator:
    inventory:
      name: environments
      kcl:
        path: environments
        content: |-
          import kcl_plugin.inventory
          
          _environments = inventory.list_resources("environment")

          environments = [{id: e.id, nurn: e.metadata.nurn, alias: e.metadata.alias} for e in _environments]
  group:
    metadata:
      name: random-pet-family-${generator.environments.alias}
    resources:
      - name: firstPet
        metadata:
          name: first-pet-${generator.environments.alias}
        spec:
          name: first-pet-${generator.environments.alias}
          alias: first-pet-${generator.environments.alias}
          description: I'm just a pet, the first one, and my environment is ${generator.environments.alias}
          resourceTypeRef: pet
          properties:
            prefix: first-${generator.environments.alias}
          connections:
            - via: belongs-to
              target:
                ref:
                  name: tiago-pet-owner
            - via: belongs-to
              target:
                nurn:
                  value: ${generator.environments.nurn}
          provisioner:
            resources:
              - name: pulumiStack
                ref:
                  apiVersion: pulumi.com/v1
                  kind: Stack
                  metadata:
                    name: ${resource.metadata.name}-dev
                  spec:
                    config:
                      prefix: ${resource.spec.properties.prefix}
                    stack: dev
                    projectRepo: https://github.com/ljtfreitas/iac-experiments
                    repoDir: pulumi/random-pet-yaml
                    branch: just-ideas
                    envRefs:
                      PULUMI_CONFIG_PASSPHRASE:
                        type: Literal
                        literal:
                          value: ""
                readyWhen: ${provisioner.resources.pulumiStack.status?.currentUpdate == nil && last(provisioner.resources.pulumiStack.status?.conditions)?.type == "Ready" && provisioner.resources.pulumiStack.status?.lastUpdate?.state == "succeeded"}
                failedWhen: ${provisioner.resources.pulumiStack.status?.lastUpdate?.state == "failed"}
                outputs: ${provisioner.resources.pulumiStack.status.outputs}
          patches:
            - from: ${provisioner.resources.pulumiStack.status.outputs.name}
              to: status.inventory.properties.petName
      - name: secondPet
        metadata:
          name: second-pet-${generator.environments.alias}
        spec:
          name: second-pet-${generator.environments.alias}
          alias: second-pet-${generator.environments.alias}
          description: I'm just a second pet, and my environment is ${generator.environments.alias}
          resourceTypeRef: pet
          properties:
            prefix: second-${generator.environments.alias}
          connections:
            - via: belongs-to
              target:
                ref:
                  name: tiago-pet-owner
            - via: is-brother
              target:
                ref:
                  name: ${resources.firstPet.metadata.name}
          provisioner:
            resources:
              - name: pulumiStack
                ref:
                  apiVersion: pulumi.com/v1
                  kind: Stack
                  metadata:
                    name: ${resource.metadata.name}-dev
                  spec:
                    config:
                      prefix: ${resource.spec.properties.prefix}
                    stack: dev
                    projectRepo: https://github.com/ljtfreitas/iac-experiments
                    repoDir: pulumi/random-pet-yaml
                    branch: just-ideas
                    envRefs:
                      PULUMI_CONFIG_PASSPHRASE:
                        type: Literal
                        literal:
                          value: ""
                readyWhen: ${provisioner.resources.pulumiStack.status?.currentUpdate == nil && last(provisioner.resources.pulumiStack.status?.conditions)?.type == "Ready" && provisioner.resources.pulumiStack.status?.lastUpdate?.state == "succeeded"}
                failedWhen: ${provisioner.resources.pulumiStack.status?.lastUpdate?.state == "failed"}
                outputs: ${provisioner.resources.pulumiStack.status.outputs}
          patches:
            - from: ${provisioner.resources.pulumiStack.status.outputs.name}
              to: status.inventory.properties.petName
