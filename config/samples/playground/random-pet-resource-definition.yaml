apiVersion: klaudete.nubank.com.br/v1alpha1
kind: ResourceDefinition
metadata:
  name: random-pet
  namespace: playground
spec:
  generator:
    inventory:
      name: environments
      kcl:
        path: environments
        content: |-
          import kcl_plugin.inventory
          
          _environments = inventory.list_resources("environment")

          environments = [{id: e.id, nurn: e.metadata.nurn, alias: e.metadata.alias} for e in _environments]
  resource:
    metadata:
      name: random-pet-${generator.environments.alias}
    spec:
      name: random-pet-${generator.environments.alias}
      alias: random-pet-${generator.environments.alias}
      description: I'm just a random pet, and my environment is ${generator.environments.alias}.
      resourceTypeRef: pet
      properties:
        prefix: env-${generator.environments.alias}
      connections:
        - via: belongs-to
          target:
            nurn:
              value: ${generator.environments.nurn}
        - via: belongs-to
          target:
            ref:
              name: tiago-pet-owner
      provisioner:
        resources:
          - name: pulumiStack
            ref:
              apiVersion: pulumi.com/v1
              kind: Stack
              metadata:
                name: ${resource.metadata.name}-dev
              spec:
                config:
                  prefix: ${resource.spec.properties.prefix}
                stack: dev
                projectRepo: https://github.com/ljtfreitas/iac-experiments
                repoDir: pulumi/random-pet-yaml
                branch: just-ideas
                envRefs:
                  PULUMI_CONFIG_PASSPHRASE:
                    type: Literal
                    literal:
                      value: ""
            readyWhen: ${provisioner.resources.pulumiStack.status?.currentUpdate == nil && last(provisioner.resources.pulumiStack.status?.conditions)?.type == "Ready" && provisioner.resources.pulumiStack.status?.lastUpdate?.state == "succeeded"}
            failedWhen: ${provisioner.resources.pulumiStack.status?.lastUpdate?.state == "failed"}
            outputs: ${provisioner.resources.pulumiStack.status.outputs}
      patches:
        - from: ${provisioner.resources.pulumiStack.status.outputs.name}
          to: status.inventory.properties.petName
